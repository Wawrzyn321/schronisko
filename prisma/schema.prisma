// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Permission {
  USER
  PAGE
  NEWS
  ANIMAL
  ANIMAL_VIEW_ONLY
}

enum AnimalType {
  CAT
  DOG
}

enum AnimalGender {
  MALE
  FEMALE
  NOT_SET
}

enum AnimalLocation {
  DomTymczasowy
  Hotel
  Schronisko
  KociaChatka
  UOsobyPrywatnej
}

enum AnimalCategory {
  PilniePotrzebuja
  Weterani
  DoAdopcji
  ZnalazlyDom
  ZaTeczowymMostem
  NiedawnoZnalezione
}

enum VirtualCaretakerType {
  NiePrzypisany
  Szuka
  Znalazl
}

model User {
  id           Int               @id @default(autoincrement())
  login        String            @unique
  passwordHash String
  firstName    String
  lastName     String
  isActive     Boolean           @default(true)
  permissions  UserPermissions[]
}

model Page {
  id      String @id
  title   String
  content String
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  imageName   String
}

model Animal {
  id                   String               @id @default(uuid())
  refNo                String
  name                 String
  type                 AnimalType
  gender               AnimalGender
  description          String
  category             AnimalCategory
  location             AnimalLocation?
  locationDescription  String?
  virtualCaretakerType VirtualCaretakerType
  virtualCaretakerName String?
  isPublic             Boolean
  images               AnimalImage[]
  addedDate            DateTime             @default(now())
  imageName            String?
  note                 String?
  contactInfo          String
}

model AnimalImage {
  id        String  @id @default(uuid())
  order     Int
  animalId  String
  animal    Animal  @relation(fields: [animalId], references: [id])
  imageName String
  visible   Boolean
}

model UserPermissions {
  userId     Int
  user       User       @relation(fields: [userId], references: [id])
  permission Permission

  @@id([permission, userId])
  @@unique([userId, permission])
}

model Logs {
  id         String     @id @default(uuid())
  time       DateTime
  userId     Int
  login      String
  message    String
  permission Permission
}

model Settings {
  id    String @id
  value String
}

model Captcha {
  id        String   @id @default(uuid())
  text      String
  timestamp DateTime
}
